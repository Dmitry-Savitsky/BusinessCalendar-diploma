// <auto-generated />
using System;
using BusinessCalendar.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessCalendar.Infrastructure.Migrations
{
    [DbContext(typeof(BusinessCalendarDbContext))]
    partial class BusinessCalendarDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BusinessCalendar.Core.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ClientPhone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("BusinessCalendar.Core.Entities.ClientAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientAddresses");
                });

            modelBuilder.Entity("BusinessCalendar.Core.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("CompanyName")
                        .HasColumnType("longtext");

                    b.Property<string>("CompanyPhone")
                        .HasColumnType("longtext");

                    b.Property<string>("ImgPath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Login")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("BusinessCalendar.Core.Entities.Executor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ExecutorName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ExecutorPhone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImgPath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Executors");
                });

            modelBuilder.Entity("BusinessCalendar.Core.Entities.ExecutorHasService", b =>
                {
                    b.Property<int>("ExecutorId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("ExecutorId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ExecutorHasServices");
                });

            modelBuilder.Entity("BusinessCalendar.Core.Entities.ExecutorWorkTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeOnly?>("BreakEnd")
                        .HasColumnType("time(6)");

                    b.Property<TimeOnly?>("BreakStart")
                        .HasColumnType("time(6)");

                    b.Property<int?>("DayNo")
                        .HasColumnType("int");

                    b.Property<int>("ExecutorId")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("FromTime")
                        .HasColumnType("time(6)");

                    b.Property<bool>("IsWorking")
                        .HasColumnType("tinyint(1)");

                    b.Property<TimeOnly?>("TillTime")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.HasIndex("ExecutorId");

                    b.ToTable("ExecutorWorkTimes");
                });

            modelBuilder.Entity("BusinessCalendar.Core.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientAddressId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool?>("Completed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Confirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrderComment")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("OrderEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("OrderStart")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ClientAddressId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BusinessCalendar.Core.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewRating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewText")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("OrderId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("BusinessCalendar.Core.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("RequiresAddress")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ServicePrice")
                        .HasColumnType("int");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("BusinessCalendar.Core.Entities.ServiceInOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExecutorId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ServiceEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ServiceStart")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ExecutorId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceInOrders");
                });

            modelBuilder.Entity("BusinessCalendar.Core.Entities.Client", b =>
                {
                    b.HasOne("BusinessCalendar.Core.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BusinessCalendar.Core.Entities.ClientAddress", b =>
                {
                    b.HasOne("BusinessCalendar.Core.Entities.Client", "Client")
                        .WithMany("Addresses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("BusinessCalendar.Core.Entities.Executor", b =>
                {
                    b.HasOne("BusinessCalendar.Core.Entities.Company", "Company")
                        .WithMany("Executors")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BusinessCalendar.Core.Entities.ExecutorHasService", b =>
                {
                    b.HasOne("BusinessCalendar.Core.Entities.Executor", "Executor")
                        .WithMany("ExecutorServices")
                        .HasForeignKey("ExecutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessCalendar.Core.Entities.Service", "Service")
                        .WithMany("ExecutorServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Executor");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BusinessCalendar.Core.Entities.ExecutorWorkTime", b =>
                {
                    b.HasOne("BusinessCalendar.Core.Entities.Executor", "Executor")
                        .WithMany("WorkTimes")
                        .HasForeignKey("ExecutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Executor");
                });

            modelBuilder.Entity("BusinessCalendar.Core.Entities.Order", b =>
                {
                    b.HasOne("BusinessCalendar.Core.Entities.ClientAddress", "ClientAddress")
                        .WithMany("Orders")
                        .HasForeignKey("ClientAddressId");

                    b.HasOne("BusinessCalendar.Core.Entities.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessCalendar.Core.Entities.Company", "Company")
                        .WithMany("Orders")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ClientAddress");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BusinessCalendar.Core.Entities.Review", b =>
                {
                    b.HasOne("BusinessCalendar.Core.Entities.Client", "Client")
                        .WithMany("Reviews")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessCalendar.Core.Entities.Order", "Order")
                        .WithMany("Reviews")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BusinessCalendar.Core.Entities.Service", b =>
                {
                    b.HasOne("BusinessCalendar.Core.Entities.Company", "Company")
                        .WithMany("Services")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BusinessCalendar.Core.Entities.ServiceInOrder", b =>
                {
                    b.HasOne("BusinessCalendar.Core.Entities.Executor", "Executor")
                        .WithMany("ServiceInOrders")
                        .HasForeignKey("ExecutorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessCalendar.Core.Entities.Order", "Order")
                        .WithMany("Services")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessCalendar.Core.Entities.Service", "Service")
                        .WithMany("ServiceInOrders")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Executor");

                    b.Navigation("Order");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BusinessCalendar.Core.Entities.Client", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("BusinessCalendar.Core.Entities.ClientAddress", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BusinessCalendar.Core.Entities.Company", b =>
                {
                    b.Navigation("Executors");

                    b.Navigation("Orders");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("BusinessCalendar.Core.Entities.Executor", b =>
                {
                    b.Navigation("ExecutorServices");

                    b.Navigation("ServiceInOrders");

                    b.Navigation("WorkTimes");
                });

            modelBuilder.Entity("BusinessCalendar.Core.Entities.Order", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("BusinessCalendar.Core.Entities.Service", b =>
                {
                    b.Navigation("ExecutorServices");

                    b.Navigation("ServiceInOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
